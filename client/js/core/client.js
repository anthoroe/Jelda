////////////////////////////////////////////////////////////
// Debug logger object
////////////////////////////////////////////////////////////
var jeldaDebugLogger = function() {

	////////////////////////////////////////////////////////////
	// Variables
	////////////////////////////////////////////////////////////
	var logElement;

	////////////////////////////////////////////////////////////
	// Initialize 
	////////////////////////////////////////////////////////////
	var initialize = function() {

		// Locate and remember the log element.
		logElement = document.getElementById('debug-log')

		// Log that the logger was initialized.
		logEvent('Logger initialized.');

	};

	////////////////////////////////////////////////////////////
	// Write an event to the debug log
	////////////////////////////////////////////////////////////
	var logEvent = function(message) {

		// Create an element to append to the log div.
		var newLog = document.createElement('p');

		// Add some HTML to the element.
		newLog.innerText = '[' + new Date() + '] ' + message;

		// Append the new log to the log element
		logElement.appendChild(newLog);

	};

	////////////////////////////////////////////////////////////
	// Expose the things we want to expose
	////////////////////////////////////////////////////////////
	return {
		Initialize: initialize,
		LogEvent: logEvent
	};

};

////////////////////////////////////////////////////////////
// The graphics abstraction layer
////////////////////////////////////////////////////////////
var jeldaGraphicsEngine = function() {

	////////////////////////////////////////////////////////////
	// Variables
	////////////////////////////////////////////////////////////
	var context, engine, viewport;

	////////////////////////////////////////////////////////////
	// Initialize 
	////////////////////////////////////////////////////////////
	var initialize = function(e) {

		// Save other initialized objects passed in.
		engine = e;

		// Locate the viewport element
		viewport = document.getElementById('viewport');

		// Get the context of the viewport
		try
		{
			// Get the 2d drawing context
			context = viewport.getContext('2d');

		} catch(error) { return false; }

		// Check to make sure we have a valid context
		if (!context.rect) {
			return false;
		}
		
		// Log that everything's golden.
		engine.logger.LogEvent('Created graphics context.')

		// Everything is initialized fine.
		return true;

	};

	////////////////////////////////////////////////////////////
	// Expose the things we want to expose
	////////////////////////////////////////////////////////////
	return {
		Initialize: initialize
	};

};

////////////////////////////////////////////////////////////
// The actual client application
////////////////////////////////////////////////////////////
var jeldaClient = (function() {

	////////////////////////////////////////////////////////////
	// Set up our engine object
	////////////////////////////////////////////////////////////
	var engine = {
		graphics: new jeldaGraphicsEngine(),
		logger: new jeldaDebugLogger()
	};

	////////////////////////////////////////////////////////////
	// Return the initialization method
	////////////////////////////////////////////////////////////
	return function() {
	
		// First, initialize the logger.
		engine.logger.Initialize();

		// Now, initialize the graphics layer.
		if(!engine.graphics.Initialize(engine)) {
			engine.logger.LogEvent('Failed to initialize graphics context!');
		}

	}

})();

////////////////////////////////////////////////////////////
// Initialize the app.
////////////////////////////////////////////////////////////
window.onload = function() {
	document.client = new jeldaClient(); 
};