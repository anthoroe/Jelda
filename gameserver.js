/*
 *
 *	Jelda game server
 *
 */

////////////////////////////////////////////////////////////
// Required includes
////////////////////////////////////////////////////////////
var express = require('express'),
	app = express(),
	server = require('http').createServer(app),
	io = require('socket.io').listen(server);

////////////////////////////////////////////////////////////
// Static file routing
////////////////////////////////////////////////////////////
app.get('/', function(req, res) {
	res.sendfile(__dirname + '/client/default.html');
});

// If they're looking for static content, send that their way.
app.use('/client', express.static(__dirname + '/client'));
app.use('/assets', express.static(__dirname + '/assets'));

////////////////////////////////////////////////////////////
// Configure socket.io for heroku
////////////////////////////////////////////////////////////
io.configure(function () { 
  io.set("transports", ["xhr-polling"]); 
  io.set("polling duration", 10); 
});

////////////////////////////////////////////////////////////
// Login code
////////////////////////////////////////////////////////////
app.get('/login/:token?', function(req, res) {

	// Send all the details required to connect to the first map server.
	res.send({
		PlayerInfo: {
			// Should be an initialized PlayerEntity at some point.
			Name: req.param('token'),
			Token: req.param('token')
		},
		LocationInfo: {
			LocationId: 'home'
		}
	});

});

////////////////////////////////////////////////////////////
// Initialize the world server, which manages all the 'map servers'.
// Pass in our initialized socket.io interface
////////////////////////////////////////////////////////////
var world = require('./server/worldserver.js').Initialize(io);

////////////////////////////////////////////////////////////
// Configure the port
////////////////////////////////////////////////////////////
var port = process.env.PORT || 8000;

////////////////////////////////////////////////////////////
// Start the server
////////////////////////////////////////////////////////////
server.listen(port);